"""
Actions para actualizaci√≥n de datos del usuario con integraci√≥n al backend
"""
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
import logging
import re

from ..core.backend_client import backend_client
from ..core.validators import validator

logger = logging.getLogger(__name__)


class ActionActualizarDatos(Action):
    """Action para mostrar y gestionar datos del usuario"""

    def name(self) -> Text:
        return "action_actualizar_datos"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        logger.info("Iniciando consulta de datos del ciudadano")

        # Obtener n√∫mero de tel√©fono del sender_id
        phone_number = tracker.sender_id

        # Validar formato del n√∫mero de tel√©fono
        es_valido, phone_limpio = validator.validate_phone_number(phone_number)

        if not es_valido:
            logger.warning(f"N√∫mero de tel√©fono inv√°lido: {phone_number}")
            message = f"""‚ùå **Error de sistema**

El n√∫mero de tel√©fono {phone_number} no tiene un formato v√°lido.

**Formato esperado:** 51XXXXXXXXX (11 d√≠gitos empezando en 51)

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Men√∫ principal' - Otras opciones"""

            dispatcher.utter_message(text=message)
            return []

        # Consultar datos del ciudadano
        try:
            datos_ciudadano = backend_client.get_citizen_data(phone_limpio)

            if datos_ciudadano is None:
                # Ciudadano no registrado
                return self._handle_unregistered_citizen(dispatcher, phone_limpio)
            else:
                # Ciudadano encontrado - mostrar datos actuales
                return self._show_current_data(dispatcher, datos_ciudadano)

        except Exception as e:
            logger.error(f"Error consultando datos del ciudadano {phone_limpio}: {e}")
            return self._handle_backend_error(dispatcher)

    def _handle_unregistered_citizen(self, dispatcher: CollectingDispatcher,
                                   phone_number: str) -> List[Dict[Text, Any]]:
        """Maneja el caso cuando el ciudadano no est√° registrado"""

        logger.info(f"Ciudadano no registrado: {phone_number}")

        message = f"""üìã **No est√°s registrado en el sistema**

Tu n√∫mero {phone_number} no se encuentra registrado.

**Para registrarte necesitas:**
‚Ä¢ Acercarte a las oficinas del SAT
‚Ä¢ Contactarnos por correo: asuservicio@sat.gob.pe

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Oficinas SAT' - Ubicaciones para registro presencial
‚Ä¢ 'Men√∫ principal' - Otras opciones
‚Ä¢ 'Papeletas' - Consultar multas
‚Ä¢ 'Impuestos' - Consultar deuda tributaria"""

        dispatcher.utter_message(text=message)
        return []

    def _show_current_data(self, dispatcher: CollectingDispatcher,
                          datos_ciudadano: Dict[str, Any]) -> List[Dict[Text, Any]]:
        """Muestra los datos actuales del ciudadano"""

        logger.info("Mostrando datos actuales del ciudadano")

        # Extraer datos del response del backend
        full_name = datos_ciudadano.get('fullName', 'No disponible')
        document_type = datos_ciudadano.get('documentType', 'No disponible')
        document_number = datos_ciudadano.get('documentNumber', 'No disponible')
        phone_number = datos_ciudadano.get('phoneNumber', 'No disponible')

        message = f"""üë§ **TUS DATOS ACTUALES**

üìã **Informaci√≥n registrada:**
‚Ä¢ **Nombre completo:** {full_name}
‚Ä¢ **Tipo de documento:** {document_type}
‚Ä¢ **N√∫mero de documento:** {document_number}
‚Ä¢ **Tel√©fono:** {phone_number}

**¬øDeseas actualizar alg√∫n dato?**
‚Ä¢ Escribe **"Cambiar nombre"** - Para actualizar tu nombre
‚Ä¢ Escribe **"Cambiar documento"** - Para actualizar DNI/documento
‚Ä¢ Escribe **"Mis datos est√°n correctos"** - Si no necesitas cambios

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Men√∫ principal' - Otras opciones
‚Ä¢ 'Papeletas' - Consultar multas
‚Ä¢ 'Impuestos' - Consultar deuda tributaria"""

        dispatcher.utter_message(text=message)
        return [SlotSet("datos_actuales", datos_ciudadano)]

    def _handle_backend_error(self, dispatcher: CollectingDispatcher) -> List[Dict[Text, Any]]:
        """Maneja errores de conexi√≥n con el backend"""

        logger.error("Error de conexi√≥n con el backend")

        message = f"""üòî **Error temporal del sistema**

No pudimos consultar tus datos en este momento.

üîß **Esto puede ocurrir por:**
‚Ä¢ Mantenimiento del sistema
‚Ä¢ Problemas temporales de conexi√≥n

**Por favor intenta nuevamente en unos minutos.**

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Men√∫ principal' - Otras opciones
‚Ä¢ 'Papeletas' - Consultar multas
‚Ä¢ 'Impuestos' - Consultar deuda tributaria
‚Ä¢ 'Finalizar chat'
"""

        dispatcher.utter_message(text=message)
        return []


class ActionActualizarNombre(Action):
    """Action para actualizar el nombre del ciudadano"""

    def name(self) -> Text:
        return "action_actualizar_nombre"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        logger.info("Solicitando actualizaci√≥n de nombre")

        message = f"""‚úèÔ∏è **Actualizar nombre**

**Escribe tu nombre completo nuevo.**

**Ejemplo:** Juan Carlos P√©rez L√≥pez

*(El nombre debe tener al menos 2 palabras)*"""

        dispatcher.utter_message(text=message)
        return [SlotSet("esperando_nuevo_nombre", True)]


class ActionProcesarNuevoNombre(Action):
    """Action para procesar el nuevo nombre proporcionado"""

    def name(self) -> Text:
        return "action_procesar_nuevo_nombre"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        logger.info("Procesando nuevo nombre del ciudadano")

        nuevo_nombre = tracker.latest_message.get('text', '').strip()

        # Validar nombre
        if not nuevo_nombre or len(nuevo_nombre.split()) < 2:
            message = f"""‚ùå **Nombre inv√°lido**

El nombre debe tener al menos 2 palabras.

**Ejemplo:** Juan Carlos P√©rez L√≥pez

**Intenta nuevamente o escribe 'cancelar' para volver.**"""

            dispatcher.utter_message(text=message)
            return []

        phone_number = tracker.sender_id
        datos_actuales = tracker.get_slot("datos_actuales") or {}

        # Preparar datos para actualizaci√≥n
        citizen_data = {
            "phoneNumber": phone_number,
            "fullName": nuevo_nombre,
            "documentType": datos_actuales.get('documentType', 'DNI'),
            "documentNumber": datos_actuales.get('documentNumber', '')
        }

        # Actualizar en el backend
        try:
            actualizacion_exitosa = backend_client.update_citizen_data(citizen_data)

            if actualizacion_exitosa:
                message = f"""‚úÖ **Nombre actualizado exitosamente**

**Nuevo nombre:** {nuevo_nombre}

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Actualizar datos' - Ver datos actualizados
‚Ä¢ 'Cambiar documento' - Actualizar DNI/documento
‚Ä¢ 'Men√∫ principal' - Otras opciones"""

                dispatcher.utter_message(text=message)
                logger.info(f"Nombre actualizado exitosamente: {phone_number}")
            else:
                message = f"""‚ùå **Error actualizando nombre**

No pudimos actualizar tu nombre en este momento.

**Intenta nuevamente m√°s tarde.**

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Men√∫ principal' - Otras opciones
‚Ä¢ 'Finalizar chat'
"""

                dispatcher.utter_message(text=message)
                logger.error(f"Error actualizando nombre: {phone_number}")

        except Exception as e:
            logger.error(f"Error actualizando nombre para {phone_number}: {e}")
            dispatcher.utter_message(text="‚ùå Error temporal del sistema. Intenta nuevamente m√°s tarde.")

        return [
            SlotSet("esperando_nuevo_nombre", False),
            SlotSet("datos_actuales", None)
        ]


class ActionActualizarDocumento(Action):
    """Action para actualizar documento y tipo de documento del ciudadano"""

    def name(self) -> Text:
        return "action_actualizar_documento"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        logger.info("Solicitando actualizaci√≥n de documento")

        message = f"""üìÑ **Actualizar documento**

**Paso 1: Escribe el tipo de documento**

**Opciones disponibles:**
‚Ä¢ DNI
‚Ä¢ CE (Carnet de Extranjer√≠a)
‚Ä¢ OTRO

**Ejemplo:** DNI"""

        dispatcher.utter_message(text=message)
        return [SlotSet("esperando_tipo_documento", True)]


class ActionProcesarTipoDocumento(Action):
    """Action para procesar el tipo de documento proporcionado"""

    def name(self) -> Text:
        return "action_procesar_tipo_documento"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        logger.info("Procesando tipo de documento")

        tipo_documento = tracker.latest_message.get('text', '').strip().upper()

        # Validar tipo de documento
        tipos_validos = ['DNI', 'CE', 'OTRO']

        if tipo_documento not in tipos_validos:
            message = f"""‚ùå **Tipo de documento inv√°lido**

**Tipos v√°lidos:**
‚Ä¢ DNI
‚Ä¢ CE
‚Ä¢ OTRO

**Intenta nuevamente o escribe 'cancelar' para volver.**"""

            dispatcher.utter_message(text=message)
            return []

        message = f"""‚úÖ **Tipo de documento: {tipo_documento}**

**Paso 2: Ahora escribe el n√∫mero de documento**

**Formato seg√∫n el tipo:**
‚Ä¢ **DNI:** 8 d√≠gitos (ej: 12345678)
‚Ä¢ **CE:** 9-12 d√≠gitos (ej: 123456789)
‚Ä¢ **OTRO:** Hasta 15 caracteres alfanum√©ricos

**Ejemplo:** 12345678"""

        dispatcher.utter_message(text=message)
        return [
            SlotSet("esperando_tipo_documento", False),
            SlotSet("esperando_numero_documento", True),
            SlotSet("nuevo_tipo_documento", tipo_documento)
        ]


class ActionProcesarNumeroDocumento(Action):
    """Action para procesar el n√∫mero de documento y actualizar"""

    def name(self) -> Text:
        return "action_procesar_numero_documento"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        logger.info("Procesando n√∫mero de documento")

        numero_documento = tracker.latest_message.get('text', '').strip()
        tipo_documento = tracker.get_slot("nuevo_tipo_documento")

        # Validar n√∫mero seg√∫n tipo
        es_valido = self._validar_numero_documento(numero_documento, tipo_documento)

        if not es_valido:
            message = f"""‚ùå **N√∫mero de documento inv√°lido para {tipo_documento}**

**Formato correcto:**
‚Ä¢ **DNI:** 8 d√≠gitos exactos
‚Ä¢ **CE:** 9-12 d√≠gitos
‚Ä¢ **OTRO:** Hasta 15 caracteres alfanum√©ricos

**Intenta nuevamente o escribe 'cancelar' para volver.**"""

            dispatcher.utter_message(text=message)
            return []

        # Actualizar en el backend
        phone_number = tracker.sender_id
        datos_actuales = tracker.get_slot("datos_actuales") or {}

        nombre_completo = datos_actuales.get('fullName', '')
        primer_nombre = nombre_completo.split()[0] if nombre_completo else 'Usuario'

        # Extraer primer nombre
        nombre_completo = datos_actuales.get('fullName', '')
        primer_nombre = nombre_completo.split()[0] if nombre_completo else 'Usuario'

        citizen_data = {
            "phoneNumber": phone_number,
            "fullName": datos_actuales.get('fullName', ''),
            "documentType": tipo_documento,
            "documentNumber": numero_documento
        }

        try:
            actualizacion_exitosa = backend_client.update_citizen_data(citizen_data)

            if actualizacion_exitosa:
                message = f"""‚úÖ **Documento actualizado exitosamente**

**Nuevo documento:** {tipo_documento} {numero_documento}

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Actualizar datos' - Ver datos actualizados
‚Ä¢ 'Cambiar nombre' - Actualizar nombre
‚Ä¢ 'Men√∫ principal' - Otras opciones
‚Ä¢ 'Finalizar chat'
"""

                dispatcher.utter_message(text=message)
                logger.info(f"Documento actualizado exitosamente: {phone_number}")
            else:
                message = f"""‚ùå **Error actualizando documento**

No pudimos actualizar tu documento en este momento.

**Intenta nuevamente m√°s tarde.**

**¬øQu√© m√°s necesitas?**
‚Ä¢ 'Men√∫ principal' - Otras opciones"""

                dispatcher.utter_message(text=message)
                logger.error(f"Error actualizando documento: {phone_number}")

        except Exception as e:
            logger.error(f"Error actualizando documento para {phone_number}: {e}")
            dispatcher.utter_message(text="‚ùå Error temporal del sistema. Intenta nuevamente m√°s tarde.")

        return [
            SlotSet("esperando_numero_documento", False),
            SlotSet("nuevo_tipo_documento", None),
            SlotSet("datos_actuales", None)
        ]

    def _validar_numero_documento(self, numero: str, tipo: str) -> bool:
        """Valida formato del n√∫mero seg√∫n tipo de documento"""

        if not numero:
            return False

        if tipo == "DNI":
            # DNI: exactamente 8 d√≠gitos
            numero_limpio = re.sub(r'[^0-9]', '', numero)
            return len(numero_limpio) == 8 and numero_limpio.isdigit()

        elif tipo == "CE":
            # CE: 9-12 d√≠gitos
            numero_limpio = re.sub(r'[^0-9]', '', numero)
            return 9 <= len(numero_limpio) <= 12 and numero_limpio.isdigit()

        elif tipo == "OTRO":
            # OTRO: hasta 15 caracteres alfanum√©ricos
            numero_limpio = re.sub(r'[^A-Z0-9]', '', numero.upper())
            return 1 <= len(numero_limpio) <= 15 and numero_limpio.isalnum()

        return False