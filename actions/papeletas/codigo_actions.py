"""
Actions para consulta de c√≥digos de falta con API del SAT
"""
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
import logging

from ..core.validators import validator
from ..core.sat_api_client import sat_client

logger = logging.getLogger(__name__)

class ActionConsultarCodigoFalta(Action):
    """Action inteligente que maneja todo el flujo de consulta de c√≥digos de falta"""

    def name(self) -> Text:
        return "action_consultar_codigo_falta"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        logger.info("üî¢ Iniciando consulta de c√≥digo de falta")

        # Estado actual
        esperando_confirmacion = tracker.get_slot("esperando_confirmacion") or False

        if esperando_confirmacion:
            return self._procesar_confirmacion(dispatcher, tracker)
        else:
            return self._iniciar_consulta(dispatcher, tracker)

    def _iniciar_consulta(self, dispatcher: CollectingDispatcher,
                         tracker: Tracker) -> List[Dict[Text, Any]]:
        """Inicia el proceso de consulta detectando c√≥digo disponible"""

        # Obtener c√≥digo de slot y entities
        codigo_falta = tracker.get_slot("codigo_falta")

        # Tambi√©n revisar entities del √∫ltimo mensaje
        entities = tracker.latest_message.get('entities', [])
        for entity in entities:
            if entity['entity'] == 'codigo_falta' and not codigo_falta:
                codigo_falta = entity['value']

        logger.info(f"üìä C√≥digo detectado: {codigo_falta}")

        if codigo_falta:
            return self._procesar_codigo(dispatcher, codigo_falta)
        else:
            return self._solicitar_codigo(dispatcher)

    def _procesar_codigo(self, dispatcher: CollectingDispatcher,
                        codigo: str) -> List[Dict[Text, Any]]:
        """Procesa y valida el c√≥digo de falta"""

        # Validar formato
        es_valido, codigo_limpio = validator.validate_codigo_falta(codigo)

        if not es_valido:
            mensaje = validator.get_validation_message('codigo_falta', False, codigo)
            dispatcher.utter_message(text=mensaje)
            return [SlotSet("codigo_falta", None)]

        # Pedir confirmaci√≥n
        mensaje = f"Detect√© el c√≥digo de falta **{codigo_limpio}**. ¬øEs correcto?"
        dispatcher.utter_message(text=mensaje)

        return [
            SlotSet("codigo_falta", codigo_limpio),
            SlotSet("dato_detectado", "codigo_falta"),
            SlotSet("esperando_confirmacion", True)
        ]

    def _solicitar_codigo(self, dispatcher: CollectingDispatcher) -> List[Dict[Text, Any]]:
        """Solicita c√≥digo cuando no se proporcion√≥"""

        mensaje = """Estimado ciudadano, indique el **C√ìDIGO DE FALTA**:

üìù **Ejemplos de c√≥digos:**
‚Ä¢ C15, M08, A05, T12
‚Ä¢ G25, F03, B20, L18

¬øCu√°l es el c√≥digo que quieres consultar?"""

        dispatcher.utter_message(text=mensaje)
        return []

    def _procesar_confirmacion(self, dispatcher: CollectingDispatcher,
                             tracker: Tracker) -> List[Dict[Text, Any]]:
        """Procesa la confirmaci√≥n del usuario"""

        intent = tracker.latest_message['intent']['name']
        dato_detectado = tracker.get_slot("dato_detectado")

        logger.info(f"üîÑ Procesando confirmaci√≥n - Intent: {intent}, Dato: {dato_detectado}")

        if intent == "confirm_yes":
            return self._ejecutar_consulta_api(dispatcher, tracker)

        elif intent == "confirm_no":
            return self._manejar_correccion(dispatcher)

        else:
            # Intent no reconocido durante confirmaci√≥n
            codigo = tracker.get_slot("codigo_falta")
            mensaje = f"Para el c√≥digo **{codigo}**, necesito que confirmes:\n\n‚úÖ Di 's√≠' si es correcto\n‚ùå Di 'no' si necesitas corregirlo"
            dispatcher.utter_message(text=mensaje)
            return []

    def _ejecutar_consulta_api(self, dispatcher: CollectingDispatcher,
                             tracker: Tracker) -> List[Dict[Text, Any]]:
        """Ejecuta la consulta a la API de c√≥digos de falta"""

        codigo = tracker.get_slot("codigo_falta")

        dispatcher.utter_message(text=f"üîç Consultando informaci√≥n del c√≥digo **{codigo}**...")

        # Consultar API
        resultado = sat_client.consultar_codigo_falta(codigo)

        # Procesar resultado
        if resultado is not None:
            # Verificar si la respuesta tiene datos
            if isinstance(resultado, list) and len(resultado) > 0:
                mensaje = self._formatear_respuesta_codigo(resultado, codigo)
                dispatcher.utter_message(text=mensaje)
            elif isinstance(resultado, dict) and resultado:
                mensaje = self._formatear_respuesta_codigo(resultado, codigo)
                dispatcher.utter_message(text=mensaje)
            else:
                # Respuesta vac√≠a - c√≥digo no encontrado
                self._manejar_codigo_no_encontrado(dispatcher, codigo)
        else:
            self._manejar_error_api(dispatcher, codigo)

        return self._reset_slots()

    def _manejar_codigo_no_encontrado(self, dispatcher: CollectingDispatcher, codigo: str):
        """Maneja cuando el c√≥digo no se encuentra en la base de datos"""

        mensaje = f"""‚ùå El c√≥digo **{codigo}** no se encontr√≥ en la base de datos del SAT.

üîç **Posibles causas:**
‚Ä¢ El c√≥digo puede estar mal escrito
‚Ä¢ Podr√≠a ser un c√≥digo desactualizado
‚Ä¢ Puede que no exista ese c√≥digo espec√≠fico

üí° **Sugerencias:**
‚Ä¢ Verifica que el c√≥digo est√© correctamente escrito
‚Ä¢ Consulta directamente en: https://www.sat.gob.pe/WebSiteV8/Modulos/contenidos/mult_Papeletas_ti_rntv2.aspx
‚Ä¢ Si tienes una papeleta f√≠sica, verifica el c√≥digo en el documento

¬øQuieres intentar con otro c√≥digo?"""

        dispatcher.utter_message(text=mensaje)

    def _formatear_respuesta_codigo(self, data: Dict[str, Any], codigo: str) -> str:
        """Formatea la respuesta de la API de c√≥digos de falta"""

        # Extraer datos de la respuesta
        codigo_falta = data.get('codigo', codigo)
        infraccion = data.get('infraccion', 'No disponible')
        calificacion = data.get('calificacion', 'No disponible')
        porcentaje_uit = data.get('porcentaje_uit', 'No disponible')
        monto = data.get('monto', 'No disponible')
        sancion = data.get('sancion', 'No disponible')
        puntos = data.get('puntos', 'No disponible')
        medida_preventiva = data.get('medida_preventiva', 'No disponible')

        # Formatear respuesta seg√∫n el formato original del SAT
        mensaje = f"""La falta corresponde a:

**C√ìDIGO FALTA:** {codigo_falta}
**INFRACCI√ìN:** {infraccion}
**CALIFICACI√ìN:** {calificacion}
**%UIT:** {porcentaje_uit}
**MONTO:** S/ {monto}
**SANCI√ìN:** {sancion}
**PUNTOS:** {puntos}
**MEDIDA PREVENTIVA:** {medida_preventiva}

MAYOR DETALLE EN EL SIGUIENTE LINK:
üìåhttps://www.sat.gob.pe/WebSiteV8/Modulos/contenidos/mult_Papeletas_ti_rntv2.aspx"""

        return mensaje

    def _manejar_error_api(self, dispatcher: CollectingDispatcher, codigo: str):
        """Maneja errores de la API de forma amigable"""

        mensaje = f"""üòî Lo siento, tuve un problema t√©cnico al consultar el c√≥digo **{codigo}**.

üîß Esto puede ocurrir por:
‚Ä¢ Mantenimiento del sistema del SAT
‚Ä¢ El c√≥digo no existe en la base de datos
‚Ä¢ Problemas temporales de conexi√≥n

üì± **Mientras tanto, puedes:**
‚Ä¢ Consultar directamente en: https://www.sat.gob.pe/WebSiteV8/Modulos/contenidos/mult_Papeletas_ti_rntv2.aspx
‚Ä¢ Verificar que el c√≥digo est√© bien escrito
‚Ä¢ Intentar nuevamente en unos minutos

‚è∞ ¬øQuieres intentar con otro c√≥digo o necesitas ayuda con algo m√°s?"""

        dispatcher.utter_message(text=mensaje)

    def _manejar_correccion(self, dispatcher: CollectingDispatcher) -> List[Dict[Text, Any]]:
        """Maneja cuando el usuario indica que el c√≥digo es incorrecto"""

        mensaje = """¬øCu√°l es el c√≥digo correcto?

üìù **Recuerda el formato:**
‚Ä¢ C15, M08, A05 (letra + n√∫meros)
‚Ä¢ T12, G25, F03, etc.

Por favor, proporciona el c√≥digo correcto:"""

        dispatcher.utter_message(text=mensaje)

        return [
            SlotSet("esperando_confirmacion", False),
            SlotSet("dato_detectado", None),
            SlotSet("codigo_falta", None)
        ]

    def _reset_slots(self) -> List[Dict[Text, Any]]:
        """Resetea slots despu√©s de completar consulta"""
        return [
            SlotSet("esperando_confirmacion", False),
            SlotSet("dato_detectado", None),
            SlotSet("tipo_consulta_actual", None)
        ]